
1. npm init -> Add description and author -> Created package.json
2. npm (install locally) install -S express
3. npm install -S express mongoose
-> rm -rf .git -> if you accidentally create a repository
-> Add sudo at beginning of npm if something doesn't download
4. Create index.js
5. Create Client Folder -> Scripts Folder -> Style Folder -> Images Folder

Index.js
6. Setup packages in the file

MongoDB
7. Clusters
8. Cluster0
9. Collections tab
10. Create Database button

todoApp + noteCollections
11. Need info to connect -> Overview tab -> Connect -> Connect Your Application
12. Copy ->  mongodb+srv://mongoosePracticeUser:<password>@cluster0.stkey.mongodb.net/<dbname>?retryWrites=true&w=majority
13 Paste inside "" under  ->  dbCredentials (Line 5)

Add new user
14. Database Access
15. Add New User
16. Update database name

Database Security
1. Separate file for db sensitive data
2. Add file to .gitignore

A ToDo Note Should have the following information: 
Author: 
Title
Note text
Completed Status
Archive Status
Priority Level
Categories (future feature)
Timestamp
Due date (future feature)

Scope creep = Revision Cycle Hell
Note: Someone wants a feature and it causes you to never complete the app. To counter this, write down the app feature you want and do it later

FRONT-END REQUEST OBJECT:
{
author: null
title: string
text: string
completed: boolean
archived: boolean
priority: number
categories: null
timestamp: number (MILLISECONDS FROM DATE OBJECT)
}

BACK-END RESPONSE OBJECT {
saved: boolean
Id: String
error: String (future feature)
}
Note: Backend is in index.js
App.post(callback, route)

FRONT-END REQUEST:
Name: newNote (This is what we named it)
Send: Request Object Object Above
Return: Response Object Above

$post(url, data, callback) 
Note ignore 404 Error because this isn't run in the backend

IF YOU FORGOT TO ADD A .GITIGNORE FILE
git reset

-> ICONS | icons8.com

READ FILE | FRONT-END REQUEST
Name: newNote
Send: Request Object Above
Return: Response Object Above
}

READ FILE | FRONT-END REQUEST
Name: getlist
Send: {}
Return: {
List: [... all documents]
}

GET LIST | FRONT END REQUEST
name: modify
sending: {
Id: String
Action: String (if String == delete, betel from db, if String == update, update the document
Data: Null or Object (based on action)
}
{
Copy: Object (future feature: holds original task for undo)
Error: String (future feature)
}

Notes on timestamp
1. January 1970 -> timestamp:1607620857179
2. Milliseconds
3. To read it... We can feed it into an object


SHORT CUTS
Error -> err
Event  -> e
Request  -> req
Response  -> res


